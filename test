#include <iostream>
#include <GL/glut.h>
#include <GL/gl.h>
#include <GL/glu.h>
#define STB_IMAGE_IMPLEMENTATION

GLuint m_texture[4];
GLfloat alpha = 0;

// Vẽ trục tọa độ
void vetruc() {
    glDisable(GL_LIGHTING);
    glBegin(GL_LINES);
    glColor3f(1.0, 0.0, 0.0); // Đỏ
    glVertex3f(-15.0, 0.0, 0.0);
    glVertex3f(15.0, 0.0, 0.0);
    glEnd();

    glBegin(GL_LINES);
    glColor3f(0.0, 1.0, 0.0); // Xanh lá
    glVertex3f(0.0, -15.0, 0.0);
    glVertex3f(0.0, 15.0, 0.0);
    glEnd();

    glBegin(GL_LINES);
    glColor3f(0.0, 0.0, 1.0); // Xanh dương
    glVertex3f(0.0, 0.0, 0.0);
    glVertex3f(0.0, 0.0, 15.0);
    glEnd();
    glEnable(GL_LIGHTING);
}


void ve_dau() {
    glutWireSphere(0.5, 20, 20);
}


void ve_canh_tay() {
    glPushMatrix();
    glScalef(0.2, 1.0, 0.2);
    glutWireCube(1.0);
    glPopMatrix();
}


void ve_cang_tay() {
    glPushMatrix();
    glScalef(0.2, 1.0, 0.2);
    glutWireCube(1.0);
    glPopMatrix();
}


void ve_chan() {
    glScalef(0.25, 1.0, 0.25);
    glutWireCube(1.0);
}


void ve_than() {
    glScalef(1, 1.5, 0.5);
    glutWireCube(1.0);
}


void MyDisplay() {
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glLoadIdentity();
    gluLookAt(0, 0, 7, 0, 0, 0, 0, 1, 0);
    vetruc();

    // Đầu
    glPushMatrix();
    glTranslatef(0.0, 1.2, 0.0);
    ve_dau();
    glPopMatrix();

    // Thân
    glPushMatrix();
    ve_than();
    glPopMatrix();

    // Tay trái
    glPushMatrix();
    glTranslatef(-0.75, 0.5, 0.0); // Dịch đến vị trí cánh tay
    glRotatef(sin(alpha) * 45, 0, 0, 1); // Quay tay để vẫy
    ve_canh_tay(); // Vẽ cánh tay
    glTranslatef(0.0, 1.0, 0.0); // Dịch đến giữa cánh tay
    glRotatef(sin(alpha) * 45, 0, 0, 1); // Quay cẳng tay để vẫy
    ve_cang_tay(); // Vẽ cẳng tay
    glPopMatrix();

    // Tay phải
    glPushMatrix();
    glTranslatef(0.75, 0.5, 0.0);
    glRotatef(-sin(alpha) * 45, 0, 0, 1);
    glTranslatef(0.0, 0.5, 0.0);
    ve_canh_tay();
    glTranslatef(0.0, 1.0, 0.0);
    ve_cang_tay();
    glPopMatrix();

    // Chân trái
    glPushMatrix();
    glTranslatef(0.3, -1.3, 0.0);
    ve_chan();
    glPopMatrix();

    // Chân phải
    glPushMatrix();
    glTranslatef(-0.3, -1.3, 0.0);
    ve_chan();
    glPopMatrix();

    glFlush();
    glutSwapBuffers();
}

// Hàm quay
void quay() {
    alpha += 0.001;
    if (alpha >= 360) alpha = 0;
    glutPostRedisplay();
}

// Hàm xử lý thay đổi kích thước cửa sổ
void ReShape(int width, int height) {
    glViewport(0, 0, width, height);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    float ratio = (float)width / (float)height;
    gluPerspective(45.0, ratio, 1, 200.0);
    glMatrixMode(GL_MODELVIEW);
}

// Hàm khởi tạo
void init() {
    glClearColor(0, 0, 0, 1);
    glEnable(GL_DEPTH_TEST);
    glEnable(GL_LIGHTING);
    glEnable(GL_LIGHT0);
    glEnable(GL_COLOR_MATERIAL);

    GLfloat light_position[] = { 0.0, 0.0, 1.0, 0.0 };
    GLfloat light_ambient[] = { 1.0, 0.0, 0.0, 1.0 };
    GLfloat light_diffuse[] = { 0.0, 0.5, 0.0, 1.0 };
    GLfloat light_specular[] = { 1.0, 1.0, 1.0, 1.0 };
    GLfloat shininess = 50.0f;

    glMaterialfv(GL_FRONT_AND_BACK, GL_AMBIENT, light_ambient);
    glMaterialfv(GL_FRONT_AND_BACK, GL_DIFFUSE, light_diffuse);
    glMaterialfv(GL_FRONT_AND_BACK, GL_SPECULAR, light_specular);
    glMateriali(GL_FRONT_AND_BACK, GL_SHININESS, shininess);
}

// Hàm chính
int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE | GLUT_DEPTH);
    glutInitWindowSize(600, 400);
    glutInitWindowPosition(0, 0);
    glutCreateWindow("OpenGL Robot Waving");
    init();
    glutReshapeFunc(ReShape);
    glutDisplayFunc(MyDisplay);
    glutIdleFunc(quay); // Gọi hàm quay liên tục
    glutMainLoop();
    return 0;
}
